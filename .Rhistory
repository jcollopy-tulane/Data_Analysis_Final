Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
ggplot(anime_clean, aes(x = Year_Premiered, y = weighted_average)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
ggplot(anime_clean, aes(x = Year_Premiered, y = Score)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
model_data <- anime_clean %>%
select(-c(5:34))
model_data
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
null_values <- is.na(anime)
null_counts <- colSums(null_values)
null_counts
head(anime$Genres)
typeof(anime$Genres)
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n()) %>%
arrange(desc(count))
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri", "Unknown")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())%>%
arrange(desc(count))
# Display the result
print(genre_counts_1)
# Creating Dummy Variables For Genre
anime_clean <- anime_clean %>%
mutate(Genres = strsplit(Genres, ", ")) %>%
unnest(Genres) %>%
distinct() %>%
mutate(dummy = 1) %>%
spread(Genres, dummy, fill = 0)
head(anime_clean)
unique(anime_clean$Rating)
# Removing shows containing nudity
undesired <- c("Mild Nudity", "Unknown")
anime_clean <- anime_clean[ !grepl(paste(undesired, collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
dummy_variables <- model.matrix(~ Rating - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
unique(anime_clean$Type)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
unique(anime_clean$Type)
dummy_variables <- model.matrix(~ Type - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
head(anime_clean$Aired)
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
anime_clean$Year_Premiered <- as.numeric(anime_clean$Year_Premiered)
unique(anime_clean$Source)
dummy_variables <- model.matrix(~ Source - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
print(anime_clean)
unique(anime_clean$Score)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Score),]
anime_clean$Score <- as.numeric(anime_clean$Score)
colnames(anime_clean)
model_data <- anime_clean %>%
select(-c(5:34))
model_data
write_csv(model_data, "model_data.csv")
ggplot(anime, aes(x = Type, y = 1)) +
geom_tile(stat = "count", fill = "blue") +
labs(title = "Frequency of Anime Types", x = "Anime Type", y = "Frequency") +
theme_minimal()
library(ggplot2)
ggplot(anime, aes(x = Type, y = 1)) +
geom_tile(stat = "count", fill = "blue") +
labs(title = "Frequency of Anime Types", x = "Anime Type", y = "Frequency") +
theme_minimal()
heat_map_table <- ggplot(anime, aes(x = "", y = Type)) +
geom_tile(aes(fill = after_stat(count)), color = "white") +
geom_text(aes(label = after_stat(count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heat Map Table of Anime Types", x = "", y = "Anime Type", fill = "Frequency") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank())
print(heat_map_table)
ggplot(anime, aes(x = "", y = Type)) +
geom_tile(stat = "count", aes(fill = ..count..), color = "white") +
geom_text(stat = "count", aes(label = after_stat(..count..)), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heat Map Table of Anime Types", x = "", y = "Anime Type", fill = "Frequency") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank())
# Importing the necessary libraries
library(tidyverse)
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_freq
ggplot(type_freq, aes(x = Type, y = count, fill = count)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Chart Example", x = "Category", y = "Value", fill = "Subcategory") +
theme_minimal()
ggplot(type_freq, aes(x = Type, y = count, fill = count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heat Table Example", x = "X Axis", y = "Y Axis", fill = "Values") +
theme_minimal()
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Type",
x = "Type",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = count, fill = count))
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count))
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count))
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count))
geom_bar() +
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_bar()
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_col()
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count")+
theme_minimal()
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count") +
scale_fill_viridis_b()
theme_minimal()
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Type, Score)) +
geom_boxplot(aes(fill = Type)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Type, Score)) +
geom_boxplot(aes(fill = Type)) +
labs(title = "Distribution of Scores for Each Type of Media")
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Creating the barplot
ggplot(anime_clean, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
year_freq <- anime_clean %>%
group_by(as.factor(Year_Premiered)) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count") +
scale_fill_viridis_b()
year_freq <- anime_clean %>%
group_by(as.factor(Year_Premiered)) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = as.factor(Year_Premiered), y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count") +
scale_fill_viridis_b()
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = as.factor(Year_Premiered), y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count") +
scale_fill_viridis_b()
theme_minimal()
year_freq <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(Count = n())
ggplot(year_freq, aes(x = Year_Premiered, y = Count, fill = Count)) +
geom_col() +
labs(title = "Amount of Content Produced Across Years", x = "Year Premiered", y = "Count") +
scale_fill_viridis_b()
theme_minimal()
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_freq
library(ggplot2)
library(knitr)
library(kableExtra)
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
library(ggplot2)
library(knitr)
install.packages("kableExtra")
library(kableExtra)
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
type_table
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
mutate(count_color = cell_fill(value = count,
colors = colorRampPalette(c("lightblue", "darkblue"))(10))) %>%
select(Type, count_color) %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
formatStyle("count", backgroundColor = styleInterval(cuts = c(0, 5, Inf), values = c('lightblue', 'darkblue')))
library(ggplot2)
library(knitr)
library(kableExtra)
library(DT)
library(ggplot2)
library(knitr)
library(kableExtra)
install.packages("DT")
library(DT)
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
formatStyle("count", backgroundColor = styleInterval(cuts = c(0, 5, Inf), values = c('lightblue', 'darkblue')))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
kable("html") %>%
formatStyle("count", backgroundColor = styleInterval(cuts = c(0, 500, 1000, 1500, 2000), values = c('lightblue', 'darkblue')))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_freq
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
mutate(count_color = scales::col_numeric(palette = "Blues")(count)) %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
column_spec(column = c(2, 3), color = "white", background = spec_color(data$count_color))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_table <- type_freq %>%
mutate(count_color = scales::col_numeric(palette = "Blues")(count)) %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
column_spec(column = 2, color = "white", background = spec_color(data$count_color))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n()) %>%
mutate(count_color = col_numeric(palette = "Blues", domain = range(count))(count))
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n()) %>%
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_freq <- anime_clean %>%
group_by(Type) %>%
summarize(count = n())
type_freq
ggplot(type_freq, aes(x = Type, y = count, fill = count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heat Table Example", x = "X Axis", y = "Y Axis", fill = "Values") +
theme_minimal()
ggplot(anime_clean, aes(x = Year_Premiered, y = Score)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
ggplot(type_freq, aes(x = Type, y = count, fill = count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heat Table Example", x = "X Axis", y = "Y Axis", fill = "Values") +
theme_minimal()
ggplot(anime, aes(x = "", y = Type)) +
geom_tile(stat = "count", aes(fill = ..count..), color = "white") +
geom_text(stat = "count", aes(label = after_stat(..count..)), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heat Map Table of Anime Types", x = "", y = "Anime Type", fill = "Frequency") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank())
ggplot(anime_clean, aes(Type, Score)) +
geom_boxplot(aes(fill = Type)) +
labs(title = "Distribution of Scores for Each Type of Media")
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "White") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "White") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "White", size = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "White", size = 2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "White", size = 3) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 3) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Type, Score)) +
geom_boxplot(aes(fill = Type)) +
stat_summary(fun = "mean", geom = "point", shape = 18, size = 3, color = "Red") +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 3) +
labs(title = "Distribution of Scores for Each Type of Media")
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Type, Score)) +
geom_boxplot(aes(fill = Type))  +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 3) +
labs(title = "Distribution of Scores for Each Type of Media")
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 3) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(knitr)
library(kableExtra)
install.packages("DT")
library(DT)
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(Rating, Score)) +
geom_boxplot(aes(fill = Rating)) +
stat_summary(fun = "mean", geom = "text", aes(label = round(..y.., 2)),
vjust = -1, color = "Black", size = 2) +
labs(title = "Distribution of Scores for Ratings") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
2 + 3
a <- 2 + 3
a
#Let's take a look at the PDF (probability density function) first
x <- 0:2000 * 0.05 - 50
y <- dnorm(x, mean = 10, sd = sqrt(100))
# X spans over [-50, 50] and y store the pdf value for each element in x.
# The following command generates a line plot
plot(x, y, type = "l")
# search the R Documentation for this "plot" function in the lower right window.
# Let's draw some random variables from the distribution
normal.samples <- rnorm(1000, 10, 10)  # avoid using sample as the variable name because it's already used for a built-in function.  The bad behavior of R (python shares this overriding problem too)
# Produce a histogram of the random samples
hist(normal.samples)
hist(normal.samples, probability = TRUE)
hist(normal.samples, probability = TRUE)
lines(x, y, col="red", lwd=4)
#you may want to try the function "curve" too.  Go to its help page to find the usage.
a <- c(1L, "This is a character")
b <- c(TRUE, "Hello World")
c <- c(FALSE, 2)  # what is wrong here?
# using the same objects a, b, c from the above question
a.logical <- as.logical(a)
a.integer <- as.integer(a)
a.numeric <- as.numeric(a)
b.logical <- as.logical(b)
b.integer <- as.integer(b)
b.numeric <- as.numeric(b)
c.logical <- as.logical(c)
c.integer <- as.integer(c)
c.numeric <- as.numeric(c)
c.character <- as.character(c)
d <- -5:5
d.logical <- as.logical(d)
a
b
c
# finish the code below
v <- c(969, 971:1023)
# finish the code below
v.power.sum <- sum(2^v)
v.power.sum
# finish the code below
v <- c(969, 971:1023)
# finish the code below
v.power.sum.53 <- sum(2^v[-1])
v.power.sum.53
v.power.sum.second <- 2^v[1] + sum()
v.power.sum.second
# finish the code below
v.power.sum.53 <- sum(2^v) - 2^v[1]
v.power.sum.53
v.power.sum.second <- v.power.sum.53 + 2^v[1]
v.power.sum.second
