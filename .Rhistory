geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Score for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
genre_pairs <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
separate(Genres, into = c("Genre1", "Genre2"), sep = ", ") %>%
filter(!is.na(Genre2))  # Remove rows where Genre2 is NA
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
separate(Genres, into = c("Genre1", "Genre2"), sep = ", ") %>%
filter(!is.na(Genre2))  # Remove rows where Genre2 is NA
# Step 2: Count occurrences of each genre pair
genre_counts <- genre_pairs %>%
group_by(Genre1, Genre2) %>%
summarize(count = n()) %>%
ungroup()
# Step 3: Arrange in descending order based on count
genre_counts <- genre_counts %>%
arrange(desc(count))
# Step 4: Select the top 10 genre pairs
top_10_genre_pairs <- head(genre_counts, 10)
# Step 5: Plot using ggplot2
ggplot(top_10_genre_pairs, aes(x = reorder(paste(Genre1, Genre2), -count), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Genre Pairs",
x = "Genre Pairs",
y = "Count")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(Mal_ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(MAL_ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
ggplot(anime_clean, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(anime_clean, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
# Importing the necessary libraries
library(tidyverse)
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_rating, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Score for Each Rating",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_rating, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.4) +
labs(title = "Average Score for Each Rating",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_rating, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Score for Each Rating",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_rating, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Type",
x = "Type",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_rating <- anime_clean %>%
group_by(Rating) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_rating, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Rating, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_wrap(~Year_Premiered, ncol = 10)
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_wrap(~Year_Premiered, ncol = 2)
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_year <- anime_clean %>%
group_by(Year_Premiered) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Year_Premiered, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_year, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
scale_y_continuous(limits = c(0, 10)) +
labs(title = "Average Score for Each Rating",
x = "Rating",
y = "Average Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~Year_Premiered, scales = "free")
model_data <- anime_clean %>%
select(-c(5:34))
model_data
ggplot(your_data, aes(x = Year_Premiered, y = Score)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
ggplot(anime_clean, aes(x = Year_Premiered, y = Score)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
anime_clean <- anime_clean %>%
mutate(
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
weighted_sum = as.numeric(Score.10) * 10 +
as.numeric(Score.9) * 9 +
as.numeric(Score.8) * 8 +
as.numeric(Score.7) * 7 +
as.numeric(Score.6) * 6 +
as.numeric(Score.5) * 5 +
as.numeric(Score.4) * 4 +
as.numeric(Score.3) * 3 +
as.numeric(Score.2) * 2 +
as.numeric(Score.1) * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
weighted_sum = as.numeric(Score.10) * 10 +
as.numeric(Score.9) * 9 +
as.numeric(Score.8) * 8 +
as.numeric(Score.7) * 7 +
as.numeric(Score.6) * 6 +
as.numeric(Score.5) * 5 +
as.numeric(Score.4) * 4 +
as.numeric(Score.3) * 3 +
as.numeric(Score.2) * 2 +
as.numeric(Score.1) * 1,
sum_of_scores = rowSums(select(., as.numeric(starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
weighted_sum = as.numeric(Score.10) * 10 +
as.numeric(Score.9) * 9 +
as.numeric(Score.8) * 8 +
as.numeric(Score.7) * 7 +
as.numeric(Score.6) * 6 +
as.numeric(Score.5) * 5 +
as.numeric(Score.4) * 4 +
as.numeric(Score.3) * 3 +
as.numeric(Score.2) * 2 +
as.numeric(Score.1) * 1,
sum_of_scores = rowSums(select(., as.numeric(starts_with("Score."))))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
across(starts_with("Score."), as.numeric),
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
across(starts_with("Score."), ~coalesce(as.numeric(.), 0)),
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean <- anime_clean %>%
mutate(
across(starts_with("Score."), ~coalesce(as.numeric(.), 0)),
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
# Importing the necessary libraries
library(tidyverse)
library(ggplot2)
anime_clean <- anime_clean %>%
mutate(
across(starts_with("Score."), ~coalesce(as.numeric(.), 0)),
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
anime_clean$Score.10 <- as.numeric(anime_clean$Score.10)
anime_clean$Score.9 <- as.numeric(anime_clean$Score.9)
anime_clean$Score.8 <- as.numeric(anime_clean$Score.8)
anime_clean$Score.7 <- as.numeric(anime_clean$Score.7)
anime_clean$Score.6 <- as.numeric(anime_clean$Score.6)
anime_clean$Score.5 <- as.numeric(anime_clean$Score.5)
anime_clean$Score.4 <- as.numeric(anime_clean$Score.4)
anime_clean$Score.3 <- as.numeric(anime_clean$Score.3)
anime_clean$Score.2 <- as.numeric(anime_clean$Score.2)
anime_clean$Score.1 <- as.numeric(anime_clean$Score.1)
anime_clean <- anime_clean %>%
mutate(
weighted_sum = Score.10 * 10 +
Score.9 * 9 +
Score.8 * 8 +
Score.7 * 7 +
Score.6 * 6 +
Score.5 * 5 +
Score.4 * 4 +
Score.3 * 3 +
Score.2 * 2 +
Score.1 * 1,
sum_of_scores = rowSums(select(., starts_with("Score.")))
) %>%
mutate(weighted_average = weighted_sum / sum_of_scores)
ggplot(anime_clean, aes(x = Year_Premiered, y = weighted_average)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
ggplot(anime_clean, aes(x = Year_Premiered, y = Score)) +
geom_point(stat = "summary", fun = mean, color = "blue") +
labs(title = "Average Score Over Time",
x = "Year Premiered",
y = "Average Score") +
theme_minimal()
model_data <- anime_clean %>%
select(-c(5:34))
model_data
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
null_values <- is.na(anime)
null_counts <- colSums(null_values)
null_counts
head(anime$Genres)
typeof(anime$Genres)
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n()) %>%
arrange(desc(count))
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri", "Unknown")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())%>%
arrange(desc(count))
# Display the result
print(genre_counts_1)
# Creating Dummy Variables For Genre
anime_clean <- anime_clean %>%
mutate(Genres = strsplit(Genres, ", ")) %>%
unnest(Genres) %>%
distinct() %>%
mutate(dummy = 1) %>%
spread(Genres, dummy, fill = 0)
head(anime_clean)
unique(anime_clean$Rating)
# Removing shows containing nudity
undesired <- c("Mild Nudity", "Unknown")
anime_clean <- anime_clean[ !grepl(paste(undesired, collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
dummy_variables <- model.matrix(~ Rating - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
unique(anime_clean$Type)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
unique(anime_clean$Type)
dummy_variables <- model.matrix(~ Type - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
head(anime_clean$Aired)
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
anime_clean$Year_Premiered <- as.numeric(anime_clean$Year_Premiered)
unique(anime_clean$Source)
dummy_variables <- model.matrix(~ Source - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
print(anime_clean)
unique(anime_clean$Score)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Score),]
anime_clean$Score <- as.numeric(anime_clean$Score)
colnames(anime_clean)
model_data <- anime_clean %>%
select(-c(5:34))
model_data
write_csv(model_data, "model_data.csv")
