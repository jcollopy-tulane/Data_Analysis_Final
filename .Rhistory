anime <- read.csv("anime.csv")
anime
anime <- read.csv("anime.csv")
View(anime)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*", "\\1", df$your_column)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*?\\s", "\\1" anime$Aired)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*?\\s", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*, (\\d{4}) to .*", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".* (\\d{4}) .*", "\\1",anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*, (\\d+\\.\\d+)", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*", "\\1" anime$Aired)
# Making the Year_Premiered Column
anime$Year_Premiered <- anime$extracted_values <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(" ", "", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(" ", "", anime$Aired)
anime
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(" ", "", anime$Aired)
anime$Year_Premiered <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)".*?,\\s*(\\d{4}).*", "\\1"
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(" ", "", anime$Aired)
anime$Year_Premiered <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
anime
# Making the Year_Premiered Column
anime$Year_Premiered <- sub(" ", "", anime$Aired)
anime$Year_Premiered <- sub(".*?,\\s*(\\d{4}).*", "\\1", anime$Aired)
unique(anime$Year_Premiered)
# Making the Year_Premiered Column
anime$Year_Premiered <- substr(anime$Aired, start = 7, stop = nchar(anime$Aired))
anime$Year_Premiered
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime$Year_Premiered
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime$Year_Premiered <- substr(anime$Year_Premiered, start = 6, stop = 9)
anime$Year_Premiered
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime$Year_Premiered
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime$Year_Premiered <- sub(".*\\d{4}(\\d{4}).*", "\\1", anime$Year_Premiered)
anime$Year_Premiered
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime <- read.csv("anime.csv")
View(anime)
# Finding the unique Genres in the Genres column
unique_genres <- unique(anime$Genres)
unique_genres[1:5]
replace_genres <- function(genre_list) {
genre_list <- gsub("Martial Arts", "MartialArts", genre_list)
genre_list <- gsub("Slice of Life", "SliceofLife", genre_list)
genre_list <- gsub("Shounen Ai", "ShounenAI", genre_list)
genre_list <- gsub("Shoujo Ai", "ShoujoAI", genre_list)
return(genre_list)
}
anime$Genres <- lapply(anime$Genres, function(genre_list) replace_genres(genre_list))
# Putting the items in "Genres" column into a list
anime$Genres_List <- lapply(anime$Genres, function(x) unlist(strsplit(x, ", ")))
#Finding the Genre that appears the most
unlisted_strings <- unlist(anime$Genres_List)
string_frequencies <- table(unlisted_strings)
# Convert the frequency table to a data frame
frequency_df <- as.data.frame(string_frequencies)
# Rename the columns
colnames(frequency_df) <- c("String", "Frequency")
# Print the frequency data frame
sorted_data <- frequency_df[order(-frequency_df$Frequency), ]
# Print the sorted data frame
print(sorted_data)
# Getting Rid of the weirdo genres
anime <- anime[!grepl("Hentai", anime$Genres),]
anime <- anime[!grepl("Ecchi", anime$Genres),]
anime <- anime[!grepl("Harem", anime$Genres),]
anime <- anime[!grepl("Yaoi", anime$Genres),]
anime <- anime[!grepl("Yuri", anime$Genres),]
# Making the Year_Premiered Column
anime$Year_Premiered <- gsub("\\s", "", anime$Aired, perl = TRUE)
anime$Year_Premiered
anime$Year_Premiered <- sub(".*\\d{4}(\\d{4}).*", "\\1", anime$Year_Premiered)
anime$Year_Premiered
df <- data.frame(your_column = c("Apr3,1998toApr24,1999", "Jan15,2005toFeb28,2006"))
# Use regular expression to extract the year
df$extracted_year <- sub(".*\\d{4}(\\d{4}).*", "\\1", df$your_column)
# Display the resulting data frame
print(df)
anime$Year_Premiered <- s(".*,(\\d{4})to.*", "\\1", anime$Year_Premiered)
anime$Year_Premiered <- sub(".*,(\\d{4})to.*", "\\1", anime$Year_Premiered)
anime$Year_Premiered
anime$Year_Premiered <- sub(".*([0-9]{4})$", "\\1", anime$Year_Premiered)
anime$Year_Premiered
anime$Year_Premiered <- sub(".*([0-9]{4})$", "\\1", anime$Year_Premiered)
unique(anime$Year_Premiered)
anime <- read.csv("anime.csv")
head(anime)
typeof(anime$Genres)
# Finding the unique Genres in the Genres column
unique_genres <- unique(anime$Genres)
unique_genres[1:10]
replace_genres <- function(genre_list) {
genre_list <- gsub("Martial Arts", "MartialArts", genre_list)
genre_list <- gsub("Slice of Life", "SliceofLife", genre_list)
return(genre_list)
}
anime$Genres <- lapply(anime$Genres, function(genre_list) replace_genres(genre_list))
# Putting the items in "Genres" column into a list
anime$Genres_List <- lapply(anime$Genres, function(x) unlist(strsplit(x, ", ")))
#Finding the Genre that appears the most
unlisted_strings <- unlist(anime$Genres_List)
string_frequencies <- table(unlisted_strings)
# Convert the frequency table to a data frame
frequency_df <- as.data.frame(string_frequencies)
# Rename the columns
colnames(frequency_df) <- c("String", "Frequency")
# Print the frequency data frame
sorted_data <- frequency_df[order(-frequency_df$Frequency), ]
# Print the sorted data frame
print(sorted_data)
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
library(ggplot2)
ggplot(anime, aes(x = Type)) +
geom_bar()
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime"
y = "Frequency")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency") +
scale_fill_brewer(palette = "Set3")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency") +
scale_fill_brewer(palette = "Set2")
# Creating the barplot
ggplot(anime, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())
# Display the result
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())
# Display the result
print(genre_counts_1)
unique(anime_clean$Rating)
# Removing shows containing nudity
anime_clean <- anime_clean[ !grepl(paste("Mild Nudity", collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
unknown_count <- sum(anime_clean$Rating == "Unknown")
unknown_count
dummy_variables <- model.matrix(~ Rating - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
print(anime_clean)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
unknown_count <- sum(anime_clean$Year_Premiered == "Unkno")
unknown_count
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
anime_clean$Year_Premiered <- as.numeric(anime_clean$Year_Premiered)
ggplot(anime, aes(x = as.factor(YearPremiered))) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime, aes(x = YearPremiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Creating the barplot
ggplot(anime_clean, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency")
# Creating the barplot
ggplot(anime_clean, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score, fill = Score)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Rating, na.rm = TRUE))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Rating))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anime_clean <- anime_clean %>%
filter(!is.na(Score) & is.numeric(Score))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anime_clean <- anime_clean %>%
filter(!(is.na(Score) & is.numeric(Score))
average_ratings_type <- anime_clean %>%
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
