anime$Genres <- lapply(anime$Genres, function(genre_list) replace_genres(genre_list))
# Putting the items in "Genres" column into a list
anime$Genres_List <- lapply(anime$Genres, function(x) unlist(strsplit(x, ", ")))
#Finding the Genre that appears the most
unlisted_strings <- unlist(anime$Genres_List)
string_frequencies <- table(unlisted_strings)
# Convert the frequency table to a data frame
frequency_df <- as.data.frame(string_frequencies)
# Rename the columns
colnames(frequency_df) <- c("String", "Frequency")
# Print the frequency data frame
sorted_data <- frequency_df[order(-frequency_df$Frequency), ]
# Print the sorted data frame
print(sorted_data)
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
library(ggplot2)
ggplot(anime, aes(x = Type)) +
geom_bar()
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime"
y = "Frequency")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency") +
scale_fill_brewer(palette = "Set3")
ggplot(anime, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency") +
scale_fill_brewer(palette = "Set2")
# Creating the barplot
ggplot(anime, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())
# Display the result
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())
# Display the result
print(genre_counts_1)
unique(anime_clean$Rating)
# Removing shows containing nudity
anime_clean <- anime_clean[ !grepl(paste("Mild Nudity", collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
unknown_count <- sum(anime_clean$Rating == "Unknown")
unknown_count
dummy_variables <- model.matrix(~ Rating - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
print(anime_clean)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
unknown_count <- sum(anime_clean$Year_Premiered == "Unkno")
unknown_count
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
anime_clean$Year_Premiered <- as.numeric(anime_clean$Year_Premiered)
ggplot(anime, aes(x = as.factor(YearPremiered))) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime, aes(x = YearPremiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(anime_clean, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Creating the barplot
ggplot(anime_clean, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency")
# Creating the barplot
ggplot(anime_clean, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score, fill = Score)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score)) +
geom_col(stat = "summary", fun = "mean") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Rating, na.rm = TRUE))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Rating))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = Rating, fill = Type)) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anime_clean <- anime_clean %>%
filter(!is.na(Score) & is.numeric(Score))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anime_clean <- anime_clean %>%
filter(!(is.na(Score) & is.numeric(Score))
average_ratings_type <- anime_clean %>%
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
null_values <- is.null(anime)
null_counts <- colSums(null_values)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
null_values <- is.null(anime)
null_counts <- colSums(null_values)
null_values <- is.na(anime)
null_counts <- colSums(null_values)
null_counts
typeof(anime$Genres)
anime$Genres
head(anime$Genres)
typeof(anime$Genres)
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())
# Display the result
print(genre_counts)
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n()) %>%
arrange(desc(count))
# Display the result
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())%>%
arrange(desc(count))
# Display the result
print(genre_counts_1)
unique(anime_clean$Rating)
anime_unknown <- anime_clean %>%
filter(anime$Genres == "Unknown")
anime_unknown <- anime_clean %>%
filter(str_detect(Genres, "Unknown"))
anime_unknown
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri", "Unknown")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())%>%
arrange(desc(count))
# Display the result
print(genre_counts_1)
unique(anime_clean$Rating)
# Removing shows containing nudity
undesired <- c("Mild Nudity", "Unknown")
anime_clean <- anime_clean[ !grepl(paste(undesired, collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
unique(anime_clean$Type)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
unique(anime_clean$Type)
anime_clean$Aired
head(anime_clean$Aired)
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
unknown_count <- sum(anime_clean$Year_Premiered == "Unkno")
unknown_count
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
unique(anime_clean$Source)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Source),]
unique(anime_clean$Source)
unique(anime_clean$Score)
unknown_score <- anime %>%
filter(str_detect(Score, "Unknown"))
len(unknown_score)
unknown_score <- anime %>%
filter(str_detect(Score, "Unknown"))
length(unknown_score)
unique(anime_clean$Score)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Score),]
anime_clean$Score <- as.numeric(anime_clean$Score)
# Importing the necessary libraries
library(tidyverse)
# Importing the data
anime <- read.csv("anime.csv")
head(anime)
null_values <- is.na(anime)
null_counts <- colSums(null_values)
null_counts
head(anime$Genres)
typeof(anime$Genres)
genre_counts <- anime %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n()) %>%
arrange(desc(count))
print(genre_counts)
# Removing non-family friendly content
unclean <- c("Hentai", "Ecchi", "Harem", "Yaoi", "Yuri", "Unknown")
anime_clean <- anime[ !grepl(paste(unclean, collapse="|"), anime$Genres),]
genre_counts_1 <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
group_by(Genres) %>%
summarize(count = n())%>%
arrange(desc(count))
# Display the result
print(genre_counts_1)
# Creating Dummy Variables For Genre
anime_clean <- anime_clean %>%
mutate(Genres = strsplit(Genres, ", ")) %>%
unnest(Genres) %>%
distinct() %>%
mutate(dummy = 1) %>%
spread(Genres, dummy, fill = 0)
head(anime_clean)
unique(anime_clean$Rating)
# Removing shows containing nudity
undesired <- c("Mild Nudity", "Unknown")
anime_clean <- anime_clean[ !grepl(paste(undesired, collapse="|"), anime_clean$Rating),]
unique(anime_clean$Rating)
dummy_variables <- model.matrix(~ Rating - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
unique(anime_clean$Type)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Type),]
unique(anime_clean$Type)
dummy_variables <- model.matrix(~ Type - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
head(anime_clean)
head(anime_clean$Aired)
# Extracting the year the anime aired
after_comma <- sub(".*,", "", anime_clean$Aired)
anime_clean$Year_Premiered <- substr(after_comma, 1, 5)
unique(anime_clean$Year_Premiered)
anime_clean <- anime_clean[ !grepl(paste("Unkno", collapse="|"), anime_clean$Year_Premiered),]
unique(anime_clean$Year_Premiered)
anime_clean$Year_Premiered <- as.numeric(anime_clean$Year_Premiered)
unique(anime_clean$Source)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Source),]
unique(anime_clean$Source)
dummy_variables <- model.matrix(~ Source - 1, data = anime_clean)
# Combine the dummy variables with the original data frame
anime_clean <- cbind(anime_clean, dummy_variables)
# Print the result
print(anime_clean)
unique(anime_clean$Score)
anime_clean <- anime_clean[ !grepl(paste("Unknown", collapse="|"), anime_clean$Score),]
anime_clean$Score <- as.numeric(anime_clean$Score)
colnames(anime_clean)
# Creating the barplot
ggplot(anime_clean, aes(x = Type)) +
geom_bar() +
labs(title = "Frequency of Each Type",
x = "Type of Anime",
y = "Frequency")
library(ggplot2)
ggplot(anime_clean, aes(x = Year_Premiered)) +
geom_bar() +
labs(title = "Frequency of Each Year Premiered",
x = "Year Premiered",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Rating for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Creating the barplot
ggplot(anime_clean, aes(x = Rating)) +
geom_bar() +
labs(title = "Frequency of Each Rating",
x = "Rating",
y = "Frequency")
average_ratings_type <- anime_clean %>%
group_by(Type) %>%
summarize(mean_rating = mean(Score))
ggplot(anime_clean, aes(x = Type, y = as.numeric(Score))) +
stat_summary(fun = "mean", geom = "col") +
geom_text(data = average_ratings_type, aes(label = sprintf("%.2f", mean_rating), y = mean_rating + 0.1), vjust = -0.5) +
labs(title = "Average Score for Each Type",
x = "Type",
y = "Average Rating") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
genre_pairs <- anime_clean %>%
separate_rows(Genres, sep = ", ") %>%
separate(Genres, into = c("Genre1", "Genre2"), sep = ", ") %>%
filter(!is.na(Genre2))  # Remove rows where Genre2 is NA
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
separate(Genres, into = c("Genre1", "Genre2"), sep = ", ") %>%
filter(!is.na(Genre2))  # Remove rows where Genre2 is NA
# Step 2: Count occurrences of each genre pair
genre_counts <- genre_pairs %>%
group_by(Genre1, Genre2) %>%
summarize(count = n()) %>%
ungroup()
# Step 3: Arrange in descending order based on count
genre_counts <- genre_counts %>%
arrange(desc(count))
# Step 4: Select the top 10 genre pairs
top_10_genre_pairs <- head(genre_counts, 10)
# Step 5: Plot using ggplot2
ggplot(top_10_genre_pairs, aes(x = reorder(paste(Genre1, Genre2), -count), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Genre Pairs",
x = "Genre Pairs",
y = "Count")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(Mal_ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
# Step 1: Separate rows for each genre
genre_pairs <- anime %>%
separate_rows(Genres, sep = ", ") %>%
filter(!is.na(Genres))
# Step 2: Create all possible pairs of genres
all_genre_pairs <- genre_pairs %>%
group_by(MAL_ID) %>%  # Assuming there's an ID column to uniquely identify each anime
summarise(Genre_combinations = combn(sort(unique(Genres)), 2, paste, collapse = ", "),
.groups = 'drop') %>%
separate_rows(Genre_combinations, sep = ", ")
